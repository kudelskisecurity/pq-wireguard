/* SPDX-License-Identifier: MIT
 *
 * Copyright (C) 2017-2020 WireGuard LLC. All Rights Reserved.
 */

package device

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net"
	"os"
	"sync"
	"sync/atomic"
	"testing"
	"time"

	"github.com/kudelskisecurity/wireguard/tun/tuntest"
)

func getFreePort(tb testing.TB) string {
	l, err := net.ListenPacket("udp", "localhost:0")
	if err != nil {
		tb.Fatal(err)
	}
	defer l.Close()
	return fmt.Sprintf("%d", l.LocalAddr().(*net.UDPAddr).Port)
}

// uapiCfg returns a reader that contains cfg formatted use with IpcSetOperation.
// cfg is a series of alternating key/value strings.
// uapiCfg exists because editors and humans like to insert
// whitespace into configs, which can cause failures, some of which are silent.
// For example, a leading blank newline causes the remainder
// of the config to be silently ignored.
func uapiCfg(cfg ...string) io.ReadSeeker {
	if len(cfg)%2 != 0 {
		panic("odd number of args to uapiReader")
	}
	buf := new(bytes.Buffer)
	for i, s := range cfg {
		buf.WriteString(s)
		sep := byte('\n')
		if i%2 == 0 {
			sep = '='
		}
		buf.WriteByte(sep)
	}
	return bytes.NewReader(buf.Bytes())
}

// genConfigs generates a pair of configs that connect to each other.
// The configs use distinct, probably-usable ports.
func genConfigs(tb testing.TB) (cfgs [2]io.Reader) {
	var port1, port2 string
	for port1 == port2 {
		port1 = getFreePort(tb)
		port2 = getFreePort(tb)
	}

	cfgs[0] = uapiCfg(
		"private_key", "b3f080df272f7293295df15c1c2565c8d86ddd11bb6b1b0e54052b7f0525f4c42e69b99595f825ac9290a6f14a2e247f9108c659fc1e1ce41671c35ff5a74489d6cf2e337cba4c5b8fab5ef544cbff5a83022abca2a423a740a38af492535bb7e34ccd29718589876f9a3ac49990757a918cb9435cf6d572e178c8e44965bdbb9bf1d03bbbd78f026821cba37718880cf78300b096562e467c6296c1c4ac9e1ea4b8cec67b9917774a0c4fa9c56711960ab5505019d04f984bb86a244bceb000a02a652b5a0fe2d6a2fd4b53f31165852b7e3121b589acbe92a994ada3ad6794c5f59b992942c7f7281a96909fb597896799642459becc639363b341286a6095f680bd732cd6a025480a4331c2626c019f014abb27b3b8b2ec80e3a2c08707a53054a917708abcf43d8d59a145cb6c08b15d28c0ce621ba5a830051c0387acaaae77c95b48543307315aaa8c4de40069465a120af2c649c728ad24567b5a7fe14725a3a6727959a0da812a3820360ad2a6b49a37a2c8392dcc89b5b9b86cf3ad7bc2146df93854f96924a3c9a4d22a2dbc27c7e950d7f03b5762a0d11125e248844ccc7ae4e57d07072458249e9d5a81d341701ad184624b8a20e93ecf07aa6fb32a5bda638c649b460777e3250ea1c8ced4d521bcc57c04a67ce0255a29626b437969787c850ef737fe745c2d554228a2801ca71b6c571e14108b75433ea403a12d4c0d48ab44c4c466c7993469fa3e935c8715436fd7534b03440a3c70c6d26ac3ab470dd64705debb8cddd39b09334317ac58feb16ec7d48b7dd54d9968775a52b48f6a0619d5a4b558613473193080cb11d8ab55367266e28d22c6425e42339430c5d7541589c91242816c5626593dca805afcaab00603a0e32aab4840676846e07b1508fa1fedb817c347382d0868745923e335b5e0ac4adf3c1259009b8b753ee39a02434cb83f7027f62a11f7e8796a2047136c4e72834bcc757abc9a559684c416e21ed558459ba457d47c7407ca32649b8eac405fd1f3618ca954d20b7d8cb7aca366b17d80913527ba874c0ae87b9338f8675cd254e1a0ced22933c9c0a499c95ec3a15f465675edc10c0210339f9a8a445c8ad4a5351ae0aebdb6952d30582e7c255c7684001b9989e766ab637a9ea67be3871410725b634b8f8685cd3af68f88ec8c41b60e8873bfd98c79cb7207376b5b7a84647762341b2776980c55dc26c1c652cdc8865f54e78917ca4d8695af47e00a33d4c59d0a8ced84b4cee5ce704876cdbcc45186bfe8e569ee1962714b3f7f821e8f1701951107f88c0664466ad1db31eca678caa3a9440049645b4a5ce37151450d959096c7f1969175cdc3723dc4e1525bf82569094a9567885786a9fc87436007572d93cc09f545df4c5c0e41048802b3d34cc95a21c294437f462953c93a9cce8387d7d6799e53afe1a54527060540f5acca2c833657ac91f3c17acb7e8c22cdd298588fb31a2ef8950e47c34282bc76f343c2c501a46a10dc939863ab945ae5cec730566e870b85d18674995abf73254fe52e9e9021bb21422e4764d3db43101383a3f1be086b7508bcc55fc05a02e108ba14b2736407baa6408a63a796805527d012e14cb010461faaa73fac72455978270f3cc21732585b0839b2a420b1641fe2330450492f18d995f613bead528c0f0947c71c1970e8bc3b8ab8d2092c4f726397665285db30dd48ca7826af6184ae6194c4d0fb5e3ae20b0a9ca6ba258a3119804e0121ec6111fb2a2dc3661b76ca23f7c7b372c5afffa28d97c57928069f927aae2d6aa432737522395ef2534fb406bbbe3a029e405c3c770407a349494aaab5c723f660aadcf518005a83047b6ca586cacfe165aa691b483b34a54a15fd914293f9b7a1d408b2a90403da37e7f68831633ca0c9c13f8560d6c8367213cddfdaa5cc97b620a202190a62d299ad3a910d933a98dde57357690b696bb6c95418ccfa92fd386a725c612cf7333348c0f1a20e05d542de007557462c590780df068485a9690a3c89ef906c8fa6a03d3130ae8b55411196c1f88824caa054f98d1ec77bd49180822b13adf2ceed0c35a1d5cb0cf7c744f9b29020806b341f96c58fe6884aa6f25df71c65572a248c44a631642df2860795530f3c36837aec67fad385ea329eacd93331c908e6159112c1eea3f5523eb6880e21ac4c8d47963c86cffbd450d13693f486deb65890e5f92ca2924bb6a1db1e1b34d3ade3362b81259fa006b1667f8c3fa1837762e2427b2a441bde777e4c38a8cd76505b28563c7512b869dbcd",
		"listen_port", port1,
		"replace_peers", "true",
		"public_key", "c9c0a499c95ec3a15f465675edc10c0210339f9a8a445c8ad4a5351ae0aebdb6952d30582e7c255c7684001b9989e766ab637a9ea67be3871410725b634b8f8685cd3af68f88ec8c41b60e8873bfd98c79cb7207376b5b7a84647762341b2776980c55dc26c1c652cdc8865f54e78917ca4d8695af47e00a33d4c59d0a8ced84b4cee5ce704876cdbcc45186bfe8e569ee1962714b3f7f821e8f1701951107f88c0664466ad1db31eca678caa3a9440049645b4a5ce37151450d959096c7f1969175cdc3723dc4e1525bf82569094a9567885786a9fc87436007572d93cc09f545df4c5c0e41048802b3d34cc95a21c294437f462953c93a9cce8387d7d6799e53afe1a54527060540f5acca2c833657ac91f3c17acb7e8c22cdd298588fb31a2ef8950e47c34282bc76f343c2c501a46a10dc939863ab945ae5cec730566e870b85d18674995abf73254fe52e9e9021bb21422e4764d3db43101383a3f1be086b7508bcc55fc05a02e108ba14b2736407baa6408a63a796805527d012e14cb010461faaa73fac72455978270f3cc21732585b0839b2a420b1641fe2330450492f18d995f613bead528c0f0947c71c1970e8bc3b8ab8d2092c4f726397665285db30dd48ca7826af6184ae6194c4d0fb5e3ae20b0a9ca6ba258a3119804e0121ec6111fb2a2dc3661b76ca23f7c7b372c5afffa28d97c57928069f927aae2d6aa432737522395ef2534fb406bbbe3a029e405c3c770407a349494aaab5c723f660aadcf518005a83047b6ca586cacfe165aa691b483b34a54a15fd914293f9b7a1d408b2a90403da37e7f68831633ca0c9c13f8560d6c8367213cddfdaa5cc97b620a202190a62d299ad3a910d933a98dde57357690b696bb6c95418ccfa92fd386a725c612cf7333348c0f1a20e05d542de007557462c590780df068485a9690a3c89ef906c8fa6a03d3130ae8b55411196c1f88824caa054f98d1ec77bd49180822b13adf2ceed0c35a1d5cb0cf7c744f9b29020806b341f96c58fe6884aa6f25df71c65572a248c44a631642df2860795530f3c36837aec67fad385ea329eacd93331c908e6159112c1eea3f5523eb6880e21ac4c8d47963c86cffbd450d1",
		"peer_key", "66908e4d6093c397bdb2190742f286df109b23c033d685201d066f23883792823204284ca729aed96c9eee357a6f371178b221ffa91ab5150a610572e48079d8f9864a60ae593027f135cf0a237aeb5a66e883015be59b0e82946a8664b7ea76224c29674739caf3cdb4d27b2539490a13291111708b2b6f40311a56fa469b26353729303d044ae4f34139e77c2f1091948a1a130397e2e19c080a944aa11007d30a364aaab399c0a41c0f66abc005939510d004195923f5730584a74577944145752486e59ab006a356b4764209736fdc999bd3b1e3164468c191cd1657c0d72bcfa1909a4ab53e67b97e4ba65438c7530a74c596240298ac25668690f2922806479ed242027b3599786379016a1bb10811a2168465014c259f841c23c9c4376e388090f6822c90c1f7eba04bd88dc799876f635ef5a84ca684086356154f6619021b3327a75826a1c41e5282107a8314f9ce7952330c4721517aa2d4639afb41236086a799a22dacb545a455c97fdacdbb94995d5381bd46a0e5f8c014132c48809e6fe6513ed0bba2c03584f2086748b2576b6c846109d9e55a7f1c96fe4409b71404a23a47dfe355a4376f1e7016ba34bb6313ae3801c1f8fba4bf1c37b1f787d1047479b388b5a32a01396a75303f16f07cc0624867783f14f418f6a05701118c30ba5b77682e7f353fe2d85f38c627568a59cf319b9d6b320ab576e23001f67878dbba889e0154a7386907c56ee2147299532e5a6679adbcbdaab618ea1b8c33db05465a0a8ad6518a094c7eca3020a8838785994093aeb49a6dd0f93663507799ca24a3a058dd6948e286361f65a5562a0fe321c03ca64cb0427633087157b277b7484dbe877f31dc23bdf3246a453f32f7c7a2b318fabc37fa16505b1a3ab0ea9d8ec304303c2811f3985debb47b453a54a86a92189dbf8686e140c0034524959b70f7354215f5c40a19351af7a62dd9313d4a3f70146bfe0416266a55fea48df5d538e7da7cb5708ff7f4a975f69429f9223a1015c54673404c43d9550e57687fc1cc707bb1063ebc4130dcac8c48af25657da236c030f833c84c4794cbb581941592735164d4caaa80c09df81d58da6ce4311d7121894487a8e217",
		"protocol_version", "1",
		"replace_allowed_ips", "true",
		"allowed_ip", "1.0.0.2/32",
		"endpoint", "127.0.0.1:"+port2,
	)
	cfgs[1] = uapiCfg(
		"private_key", "4433a1f1718b7830bb8b09a9d7ea29778148e7c287e4ecae6436b1731a9f8e4c836b4a6a1a37ba71394cf3e4343c424c25f97626e5543840a7f6fba277008dd585a68bbaa703d1bc936206b0190739a35776a68018c92729197ab1130f6f9a5cc664c5aec48045c529d8b7299e0531353b26b81302aab68275d2c4aad3418fc5a2c9e2659de78ecf78a24825c57ffc914954cf5c5c9162eb0821413f6f6aca10e15f4c17b71cc8cea4944e823ca6e0f3934113076f62cb40b5818c40ab1d3b5214a6c844d5670d3004c2a45748b2533ba43ec0b9cd725266831b7f68048dc755ad50972359624a5ec3c3388ac1997346cc5c82ce7862c5474a97561344f0849d22671a841b3cc40ac56cb22d379eff6821fc34437368351d916677023f5f255ecde975727538a2c417e13aadf881b652fc7f101916e003134b0a8693abcd772367c8a93b9e93560109d012c2b9ecda501cb3434673317f9cc360a975d84b1237d17c8d374ac990405c5733f4305bea0b87fda7cd9f53c25d473c27b49203da74cfa3baad0ca3d6524cf56867e50b215cf1cec3dbcb06b338ba9234655c1be453a6033562a6394027a10b3de47fc08b05be0b3382e16f04e6ccc0269401d1c9b20990b2e1ca76126704c63d1efb355c203165f798f94283b243c762291d766b91758a69f208cf23cc593e36592801c0f4270305acb327572541d7117295a084123a22439380b7541ffabbc7d473bd8ccdb0398c50290ebb6422f41a92b6a8984fb086aa5682cd3bc49dd387a9575c98f7bdf4e13c5e867db06080faf81c08203b624a9bd8403a05090718fb9084ba35feb26283cab05fa73a15c39b6bf7cfee4304fe15943a210c1180595af179e50700662789070c9479b9146f99bbfdb87766208ce37784a5ab74327791b1a4b17e8611cd70ac383a08d38841cc4648eb7182b2d8642c7a3f7635a72b0c19987a9c5e1904aa538181b1958c03c0a030055ef396add6204c71994c193aa3887b704039d58b5e510c824106c26b800673f208d4541971f32acefc54c74698e8e3a14f9acaac9801fae92526932a5f31a5dd5a4f66908e4d6093c397bdb2190742f286df109b23c033d685201d066f23883792823204284ca729aed96c9eee357a6f371178b221ffa91ab5150a610572e48079d8f9864a60ae593027f135cf0a237aeb5a66e883015be59b0e82946a8664b7ea76224c29674739caf3cdb4d27b2539490a13291111708b2b6f40311a56fa469b26353729303d044ae4f34139e77c2f1091948a1a130397e2e19c080a944aa11007d30a364aaab399c0a41c0f66abc005939510d004195923f5730584a74577944145752486e59ab006a356b4764209736fdc999bd3b1e3164468c191cd1657c0d72bcfa1909a4ab53e67b97e4ba65438c7530a74c596240298ac25668690f2922806479ed242027b3599786379016a1bb10811a2168465014c259f841c23c9c4376e388090f6822c90c1f7eba04bd88dc799876f635ef5a84ca684086356154f6619021b3327a75826a1c41e5282107a8314f9ce7952330c4721517aa2d4639afb41236086a799a22dacb545a455c97fdacdbb94995d5381bd46a0e5f8c014132c48809e6fe6513ed0bba2c03584f2086748b2576b6c846109d9e55a7f1c96fe4409b71404a23a47dfe355a4376f1e7016ba34bb6313ae3801c1f8fba4bf1c37b1f787d1047479b388b5a32a01396a75303f16f07cc0624867783f14f418f6a05701118c30ba5b77682e7f353fe2d85f38c627568a59cf319b9d6b320ab576e23001f67878dbba889e0154a7386907c56ee2147299532e5a6679adbcbdaab618ea1b8c33db05465a0a8ad6518a094c7eca3020a8838785994093aeb49a6dd0f93663507799ca24a3a058dd6948e286361f65a5562a0fe321c03ca64cb0427633087157b277b7484dbe877f31dc23bdf3246a453f32f7c7a2b318fabc37fa16505b1a3ab0ea9d8ec304303c2811f3985debb47b453a54a86a92189dbf8686e140c0034524959b70f7354215f5c40a19351af7a62dd9313d4a3f70146bfe0416266a55fea48df5d538e7da7cb5708ff7f4a975f69429f9223a1015c54673404c43d9550e57687fc1cc707bb1063ebc4130dcac8c48af25657da236c030f833c84c4794cbb581941592735164d4caaa80c09df81d58da6ce4311d7121894487a8e217dfabb83baf27b12a82d2dbcad3414dc654a48dafaa6974b8d8b04af3614e1a58b7bd9123683ed38f1ec68186506de9e1a198625d5f6244db2dd0750efaa5fa6d",
		"listen_port", port2,
		"replace_peers", "true",
		"public_key", "66908e4d6093c397bdb2190742f286df109b23c033d685201d066f23883792823204284ca729aed96c9eee357a6f371178b221ffa91ab5150a610572e48079d8f9864a60ae593027f135cf0a237aeb5a66e883015be59b0e82946a8664b7ea76224c29674739caf3cdb4d27b2539490a13291111708b2b6f40311a56fa469b26353729303d044ae4f34139e77c2f1091948a1a130397e2e19c080a944aa11007d30a364aaab399c0a41c0f66abc005939510d004195923f5730584a74577944145752486e59ab006a356b4764209736fdc999bd3b1e3164468c191cd1657c0d72bcfa1909a4ab53e67b97e4ba65438c7530a74c596240298ac25668690f2922806479ed242027b3599786379016a1bb10811a2168465014c259f841c23c9c4376e388090f6822c90c1f7eba04bd88dc799876f635ef5a84ca684086356154f6619021b3327a75826a1c41e5282107a8314f9ce7952330c4721517aa2d4639afb41236086a799a22dacb545a455c97fdacdbb94995d5381bd46a0e5f8c014132c48809e6fe6513ed0bba2c03584f2086748b2576b6c846109d9e55a7f1c96fe4409b71404a23a47dfe355a4376f1e7016ba34bb6313ae3801c1f8fba4bf1c37b1f787d1047479b388b5a32a01396a75303f16f07cc0624867783f14f418f6a05701118c30ba5b77682e7f353fe2d85f38c627568a59cf319b9d6b320ab576e23001f67878dbba889e0154a7386907c56ee2147299532e5a6679adbcbdaab618ea1b8c33db05465a0a8ad6518a094c7eca3020a8838785994093aeb49a6dd0f93663507799ca24a3a058dd6948e286361f65a5562a0fe321c03ca64cb0427633087157b277b7484dbe877f31dc23bdf3246a453f32f7c7a2b318fabc37fa16505b1a3ab0ea9d8ec304303c2811f3985debb47b453a54a86a92189dbf8686e140c0034524959b70f7354215f5c40a19351af7a62dd9313d4a3f70146bfe0416266a55fea48df5d538e7da7cb5708ff7f4a975f69429f9223a1015c54673404c43d9550e57687fc1cc707bb1063ebc4130dcac8c48af25657da236c030f833c84c4794cbb581941592735164d4caaa80c09df81d58da6ce4311d7121894487a8e217",
		"peer_key", "c9c0a499c95ec3a15f465675edc10c0210339f9a8a445c8ad4a5351ae0aebdb6952d30582e7c255c7684001b9989e766ab637a9ea67be3871410725b634b8f8685cd3af68f88ec8c41b60e8873bfd98c79cb7207376b5b7a84647762341b2776980c55dc26c1c652cdc8865f54e78917ca4d8695af47e00a33d4c59d0a8ced84b4cee5ce704876cdbcc45186bfe8e569ee1962714b3f7f821e8f1701951107f88c0664466ad1db31eca678caa3a9440049645b4a5ce37151450d959096c7f1969175cdc3723dc4e1525bf82569094a9567885786a9fc87436007572d93cc09f545df4c5c0e41048802b3d34cc95a21c294437f462953c93a9cce8387d7d6799e53afe1a54527060540f5acca2c833657ac91f3c17acb7e8c22cdd298588fb31a2ef8950e47c34282bc76f343c2c501a46a10dc939863ab945ae5cec730566e870b85d18674995abf73254fe52e9e9021bb21422e4764d3db43101383a3f1be086b7508bcc55fc05a02e108ba14b2736407baa6408a63a796805527d012e14cb010461faaa73fac72455978270f3cc21732585b0839b2a420b1641fe2330450492f18d995f613bead528c0f0947c71c1970e8bc3b8ab8d2092c4f726397665285db30dd48ca7826af6184ae6194c4d0fb5e3ae20b0a9ca6ba258a3119804e0121ec6111fb2a2dc3661b76ca23f7c7b372c5afffa28d97c57928069f927aae2d6aa432737522395ef2534fb406bbbe3a029e405c3c770407a349494aaab5c723f660aadcf518005a83047b6ca586cacfe165aa691b483b34a54a15fd914293f9b7a1d408b2a90403da37e7f68831633ca0c9c13f8560d6c8367213cddfdaa5cc97b620a202190a62d299ad3a910d933a98dde57357690b696bb6c95418ccfa92fd386a725c612cf7333348c0f1a20e05d542de007557462c590780df068485a9690a3c89ef906c8fa6a03d3130ae8b55411196c1f88824caa054f98d1ec77bd49180822b13adf2ceed0c35a1d5cb0cf7c744f9b29020806b341f96c58fe6884aa6f25df71c65572a248c44a631642df2860795530f3c36837aec67fad385ea329eacd93331c908e6159112c1eea3f5523eb6880e21ac4c8d47963c86cffbd450d1",
		"protocol_version", "1",
		"replace_allowed_ips", "true",
		"allowed_ip", "1.0.0.1/32",
		"endpoint", "127.0.0.1:"+port1,
	)
	return
}

// A testPair is a pair of testPeers.
type testPair [2]testPeer

// A testPeer is a peer used for testing.
type testPeer struct {
	tun *tuntest.ChannelTUN
	dev *Device
	ip  net.IP
}

type SendDirection bool

const (
	Ping SendDirection = true
	Pong SendDirection = false
)

func (pair *testPair) Send(tb testing.TB, ping SendDirection, done chan struct{}) {
	tb.Helper()
	p0, p1 := pair[0], pair[1]
	if !ping {
		// pong is the new ping
		p0, p1 = p1, p0
	}
	msg := tuntest.Ping(p0.ip, p1.ip)
	p1.tun.Outbound <- msg
	timer := time.NewTimer(100 * time.Second)
	defer timer.Stop()
	var err error
	select {
	case msgRecv := <-p0.tun.Inbound:
		if !bytes.Equal(msg, msgRecv) {
			err = errors.New("ping did not transit correctly")
		}
	case <-timer.C:
		err = errors.New("ping did not transit")
	case <-done:
	}
	if err != nil {
		// The error may have occurred because the test is done.
		select {
		case <-done:
			return
		default:
		}
		// Real error.
		tb.Error(err)
	}
}

// genTestPair creates a testPair.
func genTestPair(tb testing.TB) (pair testPair) {
	const maxAttempts = 10
NextAttempt:
	for i := 0; i < maxAttempts; i++ {
		cfg := genConfigs(tb)
		// Bring up a ChannelTun for each config.
		for i := range pair {
			p := &pair[i]
			p.tun = tuntest.NewChannelTUN()
			if i == 0 {
				p.ip = net.ParseIP("1.0.0.1")
			} else {
				p.ip = net.ParseIP("1.0.0.2")
			}
			level := LogLevelVerbose
			if _, ok := tb.(*testing.B); ok && !testing.Verbose() {
				level = LogLevelError
			}
			p.dev = NewDevice(p.tun.TUN(), NewLogger(level, fmt.Sprintf("dev%d: ", i)))
			p.dev.Up()
			if err := p.dev.IpcSetOperation(cfg[i]); err != nil {
				// genConfigs attempted to pick ports that were free.
				// There's a tiny window between genConfigs closing the port
				// and us opening it, during which another process could
				// start using it. We probably just lost that race.
				// Try again from the beginning.
				// If there's something permanent wrong,
				// we'll see that when we run out of attempts.
				tb.Logf("failed to configure device %d: %v", i, err)
				continue NextAttempt
			}
			//fmt.Printf("pair1 %+v\n", p.dev.staticIdentity.publicKey[:])
			// The device might still not be up, e.g. due to an error
			// in RoutineTUNEventReader's call to dev.Up that got swallowed.
			// Assume it's due to a transient error (port in use), and retry.
			if !p.dev.isUp.Get() {
				tb.Logf("device %d did not come up, trying again", i)
				continue NextAttempt
			}
			// The device is up. Close it when the test completes.
			tb.Cleanup(p.dev.Close)
		}
		return // success
	}

	tb.Fatalf("genChannelTUNs: failed %d times", maxAttempts)
	return
}

func TestTwoDevicePing(t *testing.T) {
	pair := genTestPair(t)
	t.Run("ping 1.0.0.1", func(t *testing.T) {
		pair.Send(t, Ping, nil)
	})
	t.Run("ping 1.0.0.2", func(t *testing.T) {
		pair.Send(t, Pong, nil)
	})
}

// TestConcurrencySafety does other things concurrently with tunnel use.
// It is intended to be used with the race detector to catch data races.
func TestConcurrencySafety(t *testing.T) {
	pair := genTestPair(t)
	done := make(chan struct{})

	const warmupIters = 10
	var warmup sync.WaitGroup
	warmup.Add(warmupIters)
	go func() {
		// Send data continuously back and forth until we're done.
		// Note that we may continue to attempt to send data
		// even after done is closed.
		i := warmupIters
		for ping := Ping; ; ping = !ping {
			pair.Send(t, ping, done)
			select {
			case <-done:
				return
			default:
			}
			if i > 0 {
				warmup.Done()
				i--
			}
		}
	}()
	warmup.Wait()

	applyCfg := func(cfg io.ReadSeeker) {
		cfg.Seek(0, io.SeekStart)
		err := pair[0].dev.IpcSetOperation(cfg)
		if err != nil {
			t.Fatal(err.Error())
		}
	}

	// Change persistent_keepalive_interval concurrently with tunnel use.
	t.Run("persistentKeepaliveInterval", func(t *testing.T) {
		println("Starting failing test...")
		cfg := uapiCfg(
			"peer_key", "66908e4d6093c397bdb2190742f286df109b23c033d685201d066f23883792823204284ca729aed96c9eee357a6f371178b221ffa91ab5150a610572e48079d8f9864a60ae593027f135cf0a237aeb5a66e883015be59b0e82946a8664b7ea76224c29674739caf3cdb4d27b2539490a13291111708b2b6f40311a56fa469b26353729303d044ae4f34139e77c2f1091948a1a130397e2e19c080a944aa11007d30a364aaab399c0a41c0f66abc005939510d004195923f5730584a74577944145752486e59ab006a356b4764209736fdc999bd3b1e3164468c191cd1657c0d72bcfa1909a4ab53e67b97e4ba65438c7530a74c596240298ac25668690f2922806479ed242027b3599786379016a1bb10811a2168465014c259f841c23c9c4376e388090f6822c90c1f7eba04bd88dc799876f635ef5a84ca684086356154f6619021b3327a75826a1c41e5282107a8314f9ce7952330c4721517aa2d4639afb41236086a799a22dacb545a455c97fdacdbb94995d5381bd46a0e5f8c014132c48809e6fe6513ed0bba2c03584f2086748b2576b6c846109d9e55a7f1c96fe4409b71404a23a47dfe355a4376f1e7016ba34bb6313ae3801c1f8fba4bf1c37b1f787d1047479b388b5a32a01396a75303f16f07cc0624867783f14f418f6a05701118c30ba5b77682e7f353fe2d85f38c627568a59cf319b9d6b320ab576e23001f67878dbba889e0154a7386907c56ee2147299532e5a6679adbcbdaab618ea1b8c33db05465a0a8ad6518a094c7eca3020a8838785994093aeb49a6dd0f93663507799ca24a3a058dd6948e286361f65a5562a0fe321c03ca64cb0427633087157b277b7484dbe877f31dc23bdf3246a453f32f7c7a2b318fabc37fa16505b1a3ab0ea9d8ec304303c2811f3985debb47b453a54a86a92189dbf8686e140c0034524959b70f7354215f5c40a19351af7a62dd9313d4a3f70146bfe0416266a55fea48df5d538e7da7cb5708ff7f4a975f69429f9223a1015c54673404c43d9550e57687fc1cc707bb1063ebc4130dcac8c48af25657da236c030f833c84c4794cbb581941592735164d4caaa80c09df81d58da6ce4311d7121894487a8e217",
			"persistent_keepalive_interval", "1",
		)
		const iters = 1
		for i := 0; i < iters; i++ {
			applyCfg(cfg)
		}
	})

	// Change private keys concurrently with tunnel use.
	t.Run("privateKey", func(t *testing.T) {
		bad := uapiCfg("private_key", "7777777777777777777777777777777777777777777777777777777777777777")
		good := uapiCfg("private_key", "b3f080df272f7293295df15c1c2565c8d86ddd11bb6b1b0e54052b7f0525f4c42e69b99595f825ac9290a6f14a2e247f9108c659fc1e1ce41671c35ff5a74489d6cf2e337cba4c5b8fab5ef544cbff5a83022abca2a423a740a38af492535bb7e34ccd29718589876f9a3ac49990757a918cb9435cf6d572e178c8e44965bdbb9bf1d03bbbd78f026821cba37718880cf78300b096562e467c6296c1c4ac9e1ea4b8cec67b9917774a0c4fa9c56711960ab5505019d04f984bb86a244bceb000a02a652b5a0fe2d6a2fd4b53f31165852b7e3121b589acbe92a994ada3ad6794c5f59b992942c7f7281a96909fb597896799642459becc639363b341286a6095f680bd732cd6a025480a4331c2626c019f014abb27b3b8b2ec80e3a2c08707a53054a917708abcf43d8d59a145cb6c08b15d28c0ce621ba5a830051c0387acaaae77c95b48543307315aaa8c4de40069465a120af2c649c728ad24567b5a7fe14725a3a6727959a0da812a3820360ad2a6b49a37a2c8392dcc89b5b9b86cf3ad7bc2146df93854f96924a3c9a4d22a2dbc27c7e950d7f03b5762a0d11125e248844ccc7ae4e57d07072458249e9d5a81d341701ad184624b8a20e93ecf07aa6fb32a5bda638c649b460777e3250ea1c8ced4d521bcc57c04a67ce0255a29626b437969787c850ef737fe745c2d554228a2801ca71b6c571e14108b75433ea403a12d4c0d48ab44c4c466c7993469fa3e935c8715436fd7534b03440a3c70c6d26ac3ab470dd64705debb8cddd39b09334317ac58feb16ec7d48b7dd54d9968775a52b48f6a0619d5a4b558613473193080cb11d8ab55367266e28d22c6425e42339430c5d7541589c91242816c5626593dca805afcaab00603a0e32aab4840676846e07b1508fa1fedb817c347382d0868745923e335b5e0ac4adf3c1259009b8b753ee39a02434cb83f7027f62a11f7e8796a2047136c4e72834bcc757abc9a559684c416e21ed558459ba457d47c7407ca32649b8eac405fd1f3618ca954d20b7d8cb7aca366b17d80913527ba874c0ae87b9338f8675cd254e1a0ced22933c9c0a499c95ec3a15f465675edc10c0210339f9a8a445c8ad4a5351ae0aebdb6952d30582e7c255c7684001b9989e766ab637a9ea67be3871410725b634b8f8685cd3af68f88ec8c41b60e8873bfd98c79cb7207376b5b7a84647762341b2776980c55dc26c1c652cdc8865f54e78917ca4d8695af47e00a33d4c59d0a8ced84b4cee5ce704876cdbcc45186bfe8e569ee1962714b3f7f821e8f1701951107f88c0664466ad1db31eca678caa3a9440049645b4a5ce37151450d959096c7f1969175cdc3723dc4e1525bf82569094a9567885786a9fc87436007572d93cc09f545df4c5c0e41048802b3d34cc95a21c294437f462953c93a9cce8387d7d6799e53afe1a54527060540f5acca2c833657ac91f3c17acb7e8c22cdd298588fb31a2ef8950e47c34282bc76f343c2c501a46a10dc939863ab945ae5cec730566e870b85d18674995abf73254fe52e9e9021bb21422e4764d3db43101383a3f1be086b7508bcc55fc05a02e108ba14b2736407baa6408a63a796805527d012e14cb010461faaa73fac72455978270f3cc21732585b0839b2a420b1641fe2330450492f18d995f613bead528c0f0947c71c1970e8bc3b8ab8d2092c4f726397665285db30dd48ca7826af6184ae6194c4d0fb5e3ae20b0a9ca6ba258a3119804e0121ec6111fb2a2dc3661b76ca23f7c7b372c5afffa28d97c57928069f927aae2d6aa432737522395ef2534fb406bbbe3a029e405c3c770407a349494aaab5c723f660aadcf518005a83047b6ca586cacfe165aa691b483b34a54a15fd914293f9b7a1d408b2a90403da37e7f68831633ca0c9c13f8560d6c8367213cddfdaa5cc97b620a202190a62d299ad3a910d933a98dde57357690b696bb6c95418ccfa92fd386a725c612cf7333348c0f1a20e05d542de007557462c590780df068485a9690a3c89ef906c8fa6a03d3130ae8b55411196c1f88824caa054f98d1ec77bd49180822b13adf2ceed0c35a1d5cb0cf7c744f9b29020806b341f96c58fe6884aa6f25df71c65572a248c44a631642df2860795530f3c36837aec67fad385ea329eacd93331c908e6159112c1eea3f5523eb6880e21ac4c8d47963c86cffbd450d13693f486deb65890e5f92ca2924bb6a1db1e1b34d3ade3362b81259fa006b1667f8c3fa1837762e2427b2a441bde777e4c38a8cd76505b28563c7512b869dbcd")
		// Set iters to a large number like 1000 to flush out data races quickly.
		// Don't leave it large. That can cause logical races
		// in which the handshake is interleaved with key changes
		// such that the private key appears to be unchanging but
		// other state gets reset, which can cause handshake failures like
		// "Received packet with invalid mac1".
		const iters = 10
		for i := 0; i < iters; i++ {
			applyCfg(bad)
			applyCfg(good)
		}
	})

	close(done)
}

func assertNil(t *testing.T, err error) {
	if err != nil {
		t.Fatal(err)
	}
}

func assertEqual(t *testing.T, a, b []byte) {
	if !bytes.Equal(a, b) {
		t.Fatal(a, "!=", b)
	}
}

func randDevice() *Device {
	pk, sk := ccaKyber.KeyGen(nil)
	var bpk CCAKyberPK
	var bsk CCAKyberSK
	copy(bpk[:], pk[:])
	copy(bsk[:], sk[:])
	tun := newDummyTUN("dummy")
	logger := NewLogger(LogLevelError, "")
	device := NewDevice(tun, logger)
	device.SetPrivateKey(bsk)
	device.SetPublicKey(bpk)
	return device
}

func deterDevice1() *Device {
	sk := "b3f080df272f7293295df15c1c2565c8d86ddd11bb6b1b0e54052b7f0525f4c42e69b99595f825ac9290a6f14a2e247f9108c659fc1e1ce41671c35ff5a74489d6cf2e337cba4c5b8fab5ef544cbff5a83022abca2a423a740a38af492535bb7e34ccd29718589876f9a3ac49990757a918cb9435cf6d572e178c8e44965bdbb9bf1d03bbbd78f026821cba37718880cf78300b096562e467c6296c1c4ac9e1ea4b8cec67b9917774a0c4fa9c56711960ab5505019d04f984bb86a244bceb000a02a652b5a0fe2d6a2fd4b53f31165852b7e3121b589acbe92a994ada3ad6794c5f59b992942c7f7281a96909fb597896799642459becc639363b341286a6095f680bd732cd6a025480a4331c2626c019f014abb27b3b8b2ec80e3a2c08707a53054a917708abcf43d8d59a145cb6c08b15d28c0ce621ba5a830051c0387acaaae77c95b48543307315aaa8c4de40069465a120af2c649c728ad24567b5a7fe14725a3a6727959a0da812a3820360ad2a6b49a37a2c8392dcc89b5b9b86cf3ad7bc2146df93854f96924a3c9a4d22a2dbc27c7e950d7f03b5762a0d11125e248844ccc7ae4e57d07072458249e9d5a81d341701ad184624b8a20e93ecf07aa6fb32a5bda638c649b460777e3250ea1c8ced4d521bcc57c04a67ce0255a29626b437969787c850ef737fe745c2d554228a2801ca71b6c571e14108b75433ea403a12d4c0d48ab44c4c466c7993469fa3e935c8715436fd7534b03440a3c70c6d26ac3ab470dd64705debb8cddd39b09334317ac58feb16ec7d48b7dd54d9968775a52b48f6a0619d5a4b558613473193080cb11d8ab55367266e28d22c6425e42339430c5d7541589c91242816c5626593dca805afcaab00603a0e32aab4840676846e07b1508fa1fedb817c347382d0868745923e335b5e0ac4adf3c1259009b8b753ee39a02434cb83f7027f62a11f7e8796a2047136c4e72834bcc757abc9a559684c416e21ed558459ba457d47c7407ca32649b8eac405fd1f3618ca954d20b7d8cb7aca366b17d80913527ba874c0ae87b9338f8675cd254e1a0ced22933c9c0a499c95ec3a15f465675edc10c0210339f9a8a445c8ad4a5351ae0aebdb6952d30582e7c255c7684001b9989e766ab637a9ea67be3871410725b634b8f8685cd3af68f88ec8c41b60e8873bfd98c79cb7207376b5b7a84647762341b2776980c55dc26c1c652cdc8865f54e78917ca4d8695af47e00a33d4c59d0a8ced84b4cee5ce704876cdbcc45186bfe8e569ee1962714b3f7f821e8f1701951107f88c0664466ad1db31eca678caa3a9440049645b4a5ce37151450d959096c7f1969175cdc3723dc4e1525bf82569094a9567885786a9fc87436007572d93cc09f545df4c5c0e41048802b3d34cc95a21c294437f462953c93a9cce8387d7d6799e53afe1a54527060540f5acca2c833657ac91f3c17acb7e8c22cdd298588fb31a2ef8950e47c34282bc76f343c2c501a46a10dc939863ab945ae5cec730566e870b85d18674995abf73254fe52e9e9021bb21422e4764d3db43101383a3f1be086b7508bcc55fc05a02e108ba14b2736407baa6408a63a796805527d012e14cb010461faaa73fac72455978270f3cc21732585b0839b2a420b1641fe2330450492f18d995f613bead528c0f0947c71c1970e8bc3b8ab8d2092c4f726397665285db30dd48ca7826af6184ae6194c4d0fb5e3ae20b0a9ca6ba258a3119804e0121ec6111fb2a2dc3661b76ca23f7c7b372c5afffa28d97c57928069f927aae2d6aa432737522395ef2534fb406bbbe3a029e405c3c770407a349494aaab5c723f660aadcf518005a83047b6ca586cacfe165aa691b483b34a54a15fd914293f9b7a1d408b2a90403da37e7f68831633ca0c9c13f8560d6c8367213cddfdaa5cc97b620a202190a62d299ad3a910d933a98dde57357690b696bb6c95418ccfa92fd386a725c612cf7333348c0f1a20e05d542de007557462c590780df068485a9690a3c89ef906c8fa6a03d3130ae8b55411196c1f88824caa054f98d1ec77bd49180822b13adf2ceed0c35a1d5cb0cf7c744f9b29020806b341f96c58fe6884aa6f25df71c65572a248c44a631642df2860795530f3c36837aec67fad385ea329eacd93331c908e6159112c1eea3f5523eb6880e21ac4c8d47963c86cffbd450d13693f486deb65890e5f92ca2924bb6a1db1e1b34d3ade3362b81259fa006b1667f8c3fa1837762e2427b2a441bde777e4c38a8cd76505b28563c7512b869dbcd"
	pk := "c9c0a499c95ec3a15f465675edc10c0210339f9a8a445c8ad4a5351ae0aebdb6952d30582e7c255c7684001b9989e766ab637a9ea67be3871410725b634b8f8685cd3af68f88ec8c41b60e8873bfd98c79cb7207376b5b7a84647762341b2776980c55dc26c1c652cdc8865f54e78917ca4d8695af47e00a33d4c59d0a8ced84b4cee5ce704876cdbcc45186bfe8e569ee1962714b3f7f821e8f1701951107f88c0664466ad1db31eca678caa3a9440049645b4a5ce37151450d959096c7f1969175cdc3723dc4e1525bf82569094a9567885786a9fc87436007572d93cc09f545df4c5c0e41048802b3d34cc95a21c294437f462953c93a9cce8387d7d6799e53afe1a54527060540f5acca2c833657ac91f3c17acb7e8c22cdd298588fb31a2ef8950e47c34282bc76f343c2c501a46a10dc939863ab945ae5cec730566e870b85d18674995abf73254fe52e9e9021bb21422e4764d3db43101383a3f1be086b7508bcc55fc05a02e108ba14b2736407baa6408a63a796805527d012e14cb010461faaa73fac72455978270f3cc21732585b0839b2a420b1641fe2330450492f18d995f613bead528c0f0947c71c1970e8bc3b8ab8d2092c4f726397665285db30dd48ca7826af6184ae6194c4d0fb5e3ae20b0a9ca6ba258a3119804e0121ec6111fb2a2dc3661b76ca23f7c7b372c5afffa28d97c57928069f927aae2d6aa432737522395ef2534fb406bbbe3a029e405c3c770407a349494aaab5c723f660aadcf518005a83047b6ca586cacfe165aa691b483b34a54a15fd914293f9b7a1d408b2a90403da37e7f68831633ca0c9c13f8560d6c8367213cddfdaa5cc97b620a202190a62d299ad3a910d933a98dde57357690b696bb6c95418ccfa92fd386a725c612cf7333348c0f1a20e05d542de007557462c590780df068485a9690a3c89ef906c8fa6a03d3130ae8b55411196c1f88824caa054f98d1ec77bd49180822b13adf2ceed0c35a1d5cb0cf7c744f9b29020806b341f96c58fe6884aa6f25df71c65572a248c44a631642df2860795530f3c36837aec67fad385ea329eacd93331c908e6159112c1eea3f5523eb6880e21ac4c8d47963c86cffbd450d1"
	var bpk CCAKyberPK
	var bsk CCAKyberSK
	FromHex(bpk[:], pk)
	FromHex(bsk[:], sk)
	tun := newDummyTUN("dummy")
	logger := NewLogger(LogLevelError, "")
	device := NewDevice(tun, logger)
	device.SetPrivateKey(bsk)
	device.SetPublicKey(bpk)
	return device
}
func deterDevice0() *Device {
	sk := "e2707357332a67ec5d0d735abea6b608098223c11a1a043beecb16e357987de54a536678fa6926c765ccfdd6c71619be64352b2a6b56ffa6327ce9ce3fdabc0cb229700504f9f748acb364c62382cea94cdf7bafe0172929c21efd948b4a96bd87a462bb5498257a4fc5831ac6e93173daa4ca9112f83363cd85afe8914bc0923011c5a30377cf53046a8a58460c9b13caa5ceca3c9ca744a3da1c86a5f604cd4cc7ea1649314101e52456ae982856c4ce4e3aa2067163e2d3cc4700a54c102321a597adf84d5b0138253078a5d79fa664826feb2543c5cab5eb4f16d18912c3471c982fe2c58ce8e8bf280a85bb94a426db439d9a97d821a2e2a397b1a567969497b323878a93b4b7e1c728b9a7018158e1620cc976269a977a7628480b564ed4b2ca054043baf0c43a5a57aff983c74c107b4b49e89b7d9529215d81c32dfb77a78cb0937cb899555812e380add0bee412b34202257b25c6e0b552649b937ceb45c1dbaaac3626a01bb88e96632313388d36484503ac8424274ce94552b7759f627c259a7eb3dc343cfb19303c4113f4a3a9cc55810715d8d01860393ff023a9e9e07f519264edb68ddd482df781230a374183c363b6f3aae2d73c458243bed0c8e6e6cc2975948987827eb383838c9fdec1953b6368fd1a3112200a9e8401e6401b103a8cc1b9239174383ba1c422c6047ff55a2487831ec518952880de980cd7c03dd952b57a469ee87bab1c8624958cc0dd69a1fe43c7b979bc33d3383b0282940403e9f16afa0b01500cae9284a64711a5a3893d61f041a488644fa48ccb7461d82947d2e35d26c260a0246fb428084b932d6cac5a47d127575411361caaba612dd974c6cd0205ed2cc9ff3360cfdab4e8247a2a95ac38b311715a991ff9bab93b4003897a10c877c5f19e736a7f62291b18e695467976b632369dc97aac483136bc3b46e963a59742497c4644b46e418c53d65ca885447ec4f969c51ac2515398b5602ff40469992c0cd4b9b2d1f34ba200ba3d46ca9b5c49c32a2e2775a679893268a351b7d1584fec3d75a2543994b40b09bd9c1a8c26fa843f848b1d3734ded51c50ab3a16a3b8c28cc58ab05fcd9929244253ff3196afb24064768f2ef63c5ee0b83f587cd166c01bc08dfe560b176c3d1f68b7f830a1393429142a952199a49d13b498730445f02b7915745e87bfb8688f1c5b7a6cd25ff78bac2c7205ca11b843b3aa4f75c77e1a266329a8ebc3afd67114627986f572219087cb8ffb8542334bf1c06640c797632b2a250019b8eca44b31285cb3c0b9f2bb4f8996db3c35150c7c649b838525283cccc502a46c5dd58e4c6ca002008e123c7a07a90228ba9d33ac3e9618a21a367ab59502ba3782a77078fcd71c4eca28ad7339d6827c81936ba1d6a060d92c75c57699da1d9f721ba8ba09d27a64742ca8a9a5250f0cb2cf190122d4a45af095b28181d75825d6a39c76083d4ca8ad40e8ad586662b7e9202dcc5771198b8bb67ce8c3199fd61772ec94d468afed5b1beee7374f30cc09a0aa2d51caa6e5658b250fb1e26d90064eb152338b1b2622c1af96524cf2cc31751802e1da9b7e301ff4f08ed9c941f0f004ae3a754d7000e5c55613a1350f5934703267a3059f7e4a0052895c148292cc75979d1b4a6af182c8b69b1e6853b0e619559256aa01be58f36ed2c050165056e64c3c15563893f70fe58c4eb7caa6571369a9798759da9846b8a3af69185bfa61162705432cbb2526be4d02749917357d6072fe39b39cab486cf145ab6bb9402bb9837c7e5ff45f06720f7d94235752c72c9ba6f7a32c06e888f3bc1dafea32b159346d92536bf3b81137c22ca75d64d90b084ccd113b6e6f245186074c67b5a76ad15e2de0ada2a10185c08c11e052f72ab09eb47b9b14c308e973a973ab7de44e77190c29f4ba41ec81b657b9fb85308b5633b0d4879c305dce1c5caa606c1fd256fa568740856a32d9059018855af664e106c48416374d18b5107c9f6957a382b61f8cdc316471a619fc9d407504e8096fcc34356235a83139670ee495754c375aba2c73a65e04d066d796acf172227efc71cada3a251c4c40b3c429105b4297120f7720f57246fdc2614e020905568402365d9132491f9a67cff7045350b5d56648dd6a88d71c954f9db56bf68e5b9f2d919e35682099be1dce22c2b48d0774fd7590192fa83df37a03223d8657bd8fdd298b78bef1aecdccefd59c09dc92704f9e446ffd4daddc1138da556a6fb9e87e4888c698e9198ec2c7b276a4e936f52ca352b86e991348"
	pk := "1d3734ded51c50ab3a16a3b8c28cc58ab05fcd9929244253ff3196afb24064768f2ef63c5ee0b83f587cd166c01bc08dfe560b176c3d1f68b7f830a1393429142a952199a49d13b498730445f02b7915745e87bfb8688f1c5b7a6cd25ff78bac2c7205ca11b843b3aa4f75c77e1a266329a8ebc3afd67114627986f572219087cb8ffb8542334bf1c06640c797632b2a250019b8eca44b31285cb3c0b9f2bb4f8996db3c35150c7c649b838525283cccc502a46c5dd58e4c6ca002008e123c7a07a90228ba9d33ac3e9618a21a367ab59502ba3782a77078fcd71c4eca28ad7339d6827c81936ba1d6a060d92c75c57699da1d9f721ba8ba09d27a64742ca8a9a5250f0cb2cf190122d4a45af095b28181d75825d6a39c76083d4ca8ad40e8ad586662b7e9202dcc5771198b8bb67ce8c3199fd61772ec94d468afed5b1beee7374f30cc09a0aa2d51caa6e5658b250fb1e26d90064eb152338b1b2622c1af96524cf2cc31751802e1da9b7e301ff4f08ed9c941f0f004ae3a754d7000e5c55613a1350f5934703267a3059f7e4a0052895c148292cc75979d1b4a6af182c8b69b1e6853b0e619559256aa01be58f36ed2c050165056e64c3c15563893f70fe58c4eb7caa6571369a9798759da9846b8a3af69185bfa61162705432cbb2526be4d02749917357d6072fe39b39cab486cf145ab6bb9402bb9837c7e5ff45f06720f7d94235752c72c9ba6f7a32c06e888f3bc1dafea32b159346d92536bf3b81137c22ca75d64d90b084ccd113b6e6f245186074c67b5a76ad15e2de0ada2a10185c08c11e052f72ab09eb47b9b14c308e973a973ab7de44e77190c29f4ba41ec81b657b9fb85308b5633b0d4879c305dce1c5caa606c1fd256fa568740856a32d9059018855af664e106c48416374d18b5107c9f6957a382b61f8cdc316471a619fc9d407504e8096fcc34356235a83139670ee495754c375aba2c73a65e04d066d796acf172227efc71cada3a251c4c40b3c429105b4297120f7720f57246fdc2614e020905568402365d9132491f9a67cff7045350b5d56648dd6a88d71c954f9db56bf68e5b9f2d919e35682099be1dce22c2b48d0774fd7590192fa83df3"
	var bpk CCAKyberPK
	var bsk CCAKyberSK
	FromHex(bpk[:], pk)
	FromHex(bsk[:], sk)
	tun := newDummyTUN("dummy")
	logger := NewLogger(LogLevelError, "")
	device := NewDevice(tun, logger)
	device.SetPrivateKey(bsk)
	device.SetPublicKey(bpk)
	return device
}

func TestUAPIconf(t *testing.T) {
	tun := newDummyTUN("dummy")
	logger := NewLogger(LogLevelVerbose, "")
	device := NewDevice(tun, logger)

	f, err := os.Open("../peer0.conf")
	if err != nil {
		panic(err)
	}
	defer f.Close()
	err = device.IpcSetOperation(f)
	if err != nil {
		panic(err)
	}

	device.PrintDevice()
}

func BenchmarkLatency(b *testing.B) {
	pair := genTestPair(b)

	// Establish a connection.
	pair.Send(b, Ping, nil)
	pair.Send(b, Pong, nil)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		pair.Send(b, Ping, nil)
		pair.Send(b, Pong, nil)
	}
}

func BenchmarkThroughput(b *testing.B) {
	pair := genTestPair(b)

	// Establish a connection.
	pair.Send(b, Ping, nil)
	pair.Send(b, Pong, nil)

	// Measure how long it takes to receive b.N packets,
	// starting when we receive the first packet.
	var recv uint64
	var elapsed time.Duration
	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		defer wg.Done()
		var start time.Time
		for {
			<-pair[0].tun.Inbound
			new := atomic.AddUint64(&recv, 1)
			if new == 1 {
				start = time.Now()
			}
			// Careful! Don't change this to else if; b.N can be equal to 1.
			if new == uint64(b.N) {
				elapsed = time.Since(start)
				return
			}
		}
	}()

	// Send packets as fast as we can until we've received enough.
	ping := tuntest.Ping(pair[0].ip, pair[1].ip)
	pingc := pair[1].tun.Outbound
	var sent uint64
	for atomic.LoadUint64(&recv) != uint64(b.N) {
		sent++
		pingc <- ping
	}
	wg.Wait()

	b.ReportMetric(float64(elapsed)/float64(b.N), "ns/op")
	b.ReportMetric(1-float64(b.N)/float64(sent), "packet-loss")
}

func BenchmarkUAPIGet(b *testing.B) {
	pair := genTestPair(b)
	pair.Send(b, Ping, nil)
	pair.Send(b, Pong, nil)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		pair[0].dev.IpcGetOperation(ioutil.Discard)
	}
}
