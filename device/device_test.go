/* SPDX-License-Identifier: MIT
 *
 * Copyright (C) 2017-2020 WireGuard LLC. All Rights Reserved.
 */

package device

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net"
	"sync"
	"sync/atomic"
	"testing"
	"time"

	"github.com/PizzaWhisperer/wireguard/tun/tuntest"
)

func getFreePort(tb testing.TB) string {
	l, err := net.ListenPacket("udp", "localhost:0")
	if err != nil {
		tb.Fatal(err)
	}
	defer l.Close()
	return fmt.Sprintf("%d", l.LocalAddr().(*net.UDPAddr).Port)
}

// uapiCfg returns a reader that contains cfg formatted use with IpcSetOperation.
// cfg is a series of alternating key/value strings.
// uapiCfg exists because editors and humans like to insert
// whitespace into configs, which can cause failures, some of which are silent.
// For example, a leading blank newline causes the remainder
// of the config to be silently ignored.
func uapiCfg(cfg ...string) io.ReadSeeker {
	if len(cfg)%2 != 0 {
		panic("odd number of args to uapiReader")
	}
	buf := new(bytes.Buffer)
	for i, s := range cfg {
		buf.WriteString(s)
		sep := byte('\n')
		if i%2 == 0 {
			sep = '='
		}
		buf.WriteByte(sep)
	}
	return bytes.NewReader(buf.Bytes())
}

// genConfigs generates a pair of configs that connect to each other.
// The configs use distinct, probably-usable ports.
func genConfigs(tb testing.TB) (cfgs [2]io.Reader) {
	var port1, port2 string
	for port1 == port2 {
		port1 = getFreePort(tb)
		port2 = getFreePort(tb)
	}

	cfgs[0] = uapiCfg(
		"private_key", "c6c212b9793fb256ac5499a3270b738dca6ddb172359f96ad815549441c4508248b137cfd3c1c60b59572fab0293198cbfb307b3d26739ca6bda0ab1202c74864a62dcbb546f419d62e53006f44a47f144cc3a24a040500a249e51900bcae1108ea5035f0b5edff80b4cdcaa02ba6862c268ea552e8b22b14ca093013a077033a3db518fed5329b42a7ff960945a93327e90bde0d5a81582cbd806b8241b69f023aa296a8cee741a25005c74930b95f29cc7d421a605570cb965d80c0ebc3497a5101792d52877375a94261d7e910c2b27176073be8ae7700b3790f7cac404a548c8609760ea189c1c3a1ae0a60583c7b28a3be3942f1fc08fcc645388a29278433f79108dba6aae029bae5c944e4b9c65ece622a1f23008a1805a23732460a3905c491cf98abb305bc2a222c8e41cead31cccb9293e9b395bc67d35d549cfb88f7b31130afb6674fa3dfa26aa55f42e6c7963b3471649e506acc2ab73c9373cfaaadb569536b6002202b73f64c4138486d7438d5753564a4953f6cb1cee91b43de362d5124f8c4060d7f5441087b4f1dc4081ba4335b185417b95263aa487d3c173d128e2926a28a1ad19094b46f2cfe7cc433eec04bd5cbdcb92452ef273f7c3297fb35d4c4927e3159e2c8c4af914aee20b7efaf39a53eb0ac3338754c857060c94ab3bac1df60b1eb10a38a5cc3a996018a902a6d72a365aae5e189ae9361584317f320baef8351308697f271c7820589f15876a19e82d631a873b8504fee599e358be74f01c536474f6fbb00bcc1af3b6ae1d39a411bb90604b2358782b8c599cdca4adae521392aac03668137bf3b57c3cb61b65183f01476a2191f73904d961b687b5ca4fc5c790ca6851fbab2fd3300e20be5a42c95066b3f9c51be32967b3fc016ab9b8f3c01ea4d653d1cacb6f3094b0d31484538bfd45a85d01423bf46a8ea92d62c95192f58630d64db0535101c896c4f5b816a3bbd9283d96e0926964769e349208a8101ef97315fc351399ad29db73f0d40505d65d2c0b244a44670524478f654646c13ba0794421e768acbb6063b385de0660a98776980b4632607a391c75470275329c3324445765fc123d6576d532b733f83517f87894178b905a354180cc8a908f8a25363345cdc4906590f6a193f42279228272ea30e4f7181b50042726b0815a72d48b434e97bbe9c87c1887ae5886b41af52d9cc9294c00028bb16f1237a68ba98d7d214390360804975c03f794ecc1b711cb69132cc2cd113b8f5a4bb2c66b52839db6073a77f387da3b034b6949ee14b2a778c7a83a3b06f7254ef1614a26045a983b9046b06f469ef4861d11eb314e54204e701325a32fb0ab5decbc5619983d151acc18b57adadbb21d6b51169679638136dda92a8a90c6b432b0102806d2bc231ac58b589a500965c54384ca968460bea4c95459979ae7a52f7bb8a27033fe29bd284018e2fa427a994dce441dc2011fabda3a70917d4da25d15ec1f8022b9c86555b035bd91a3135f87b91d646944d57922f7102be5cdb4c5bfa1ec47bf24592a001e2b295b133b69d9ca8dd36702c5f4051e75acd46c4401782d2ad61c7d9a15c25039dc5c79ad15a0d1ea6059d5179de59838e02e238a1148882e86f687abfb9264ba3a65c538b6dc98eb595753e707a9eb19cfc177a696c4cd530383a0a90ef9c130e2b0e4e94558fa4124b7193ee5aca087b42772983b820b05759c1afc09c3952bd50092162b74b1a172448a0ec8d68432da628a118c6d7bb7f0fa69ce00c8abc4c2f7376475e858b6f98094a63f16025c45254115c69e21db98692744e6c25249122f2bda9cbe08cade26c19b3b4aeecb6d5b9b39048aa072d966a8e3b0e7db0c159b89c2635249576eb1537a25027880b823dc8cbd79a184349a27b6525f5bd541d62276a069511de49ee8705cb41c988312b74321923dbb455829baddfc3b80c97e45a49711580cc6a3476693b98d2a7a0d530342f9b133fbc8b6862309582613db090949a6bf726813eb98a6a53fae868d7910be44b8b6e4368bbe48be080851b8a92ee1f2476aa4143aa8bc3f8836455356591552f7d2bfd3d10172daad31683b07bba4d6750fdd98c76aecab04b31b623ca8c719ab94dc4055029c27029a20531fd33443b6f1a53400aa4b8b17efe3bc1dd2696a87cd7ed1102a58a584e45f9ac2aea7c20f6cd3651bf1b17be8873f54c7e3940f52c6008c9b1279027f215a0abf35598c1a322436c559231783203e4630cd1364978ee069d65a2b767c2f6e08aac7549efb225458a125758224d06a42ea0b24b6b70264a45fc71ac2033b5a420b56a019170c345618d26c14f26c1c92c1e9d42633491c79ab7c3487673ed43c6bd51c2b0252d8627385996ffe4c2d9c089024847186b419e5256300f63326abcc21b26db53acc67f85b699aba32c4329228aef9b8b407a35ffe0950ae653e885bca17d4ae293c73f90766491a631a1831b5ca24607241a663a83e60066255894d4c44eb611b6ea37715a7079dc151a1107eec000d3c8918fa9a7683d480cbd8392519c57327245ea5ca12c9b42de80540200508e5b5d3721c7af28ccec4b63bc46776d86941c70ab4e53d04925596222e39cca3ed0153c2429a1b5a4920ec7fd974aa87227fc407415888ce8de235158ca9c25306222475556a8791b933eb2267e70769bdcc4043c52279eabf54c15384d95642b99870350bced455da277404e413ad65811855b02b9a59d578759aaa68397bb0a60383b8f24d992ca888f46a51f5aea223a245986f687ac4d51192695cab3d6086b384255db4acea2285cdd3be7719b6e691a7e8a2b1ef307083201eb6a7a2dbb16a58e271570a7edee561ba428ef2d46aaabc0d03975868acaf5ed94ab4447beba9c3d4dbc243097cf5972e7ccb7bae037c7357c64b02857ca71296119f9c69cd6aa937261833450797970b4fae3420ec92bd885a9b1da49115c6a5f0944a66b78344107be396619740ace6f76de927cbea5ca2a11a6c47b4c2c64717a613a9d0f0442c83bec03221cca37f42f47a53a21cab943263153d8e4a536ddca533e48b5648a2f1987a37f30e0d1c597b110141b46574f07a6b541a383944437933b66a64997a37b1c709af631a052ac72ddc380ed400461261fc533953ea349ee53c4291917d8b83b1c2c5601a1dd6a0cd2aa7395f4c0d53f4109ac1067281c521da8d828aa02c058a49524dde004bc089b3d8d28ab3f06f7c990c73c7d8b8ee7b160242b607a118609a626491fb20a27f62772bce8bdc9c11f82acba56c0cdeda1c968c5a5cfa5e5c2ffaabea80c1106ba1c619af8eaa2a8527b513e96b7b96ee31ac78f5ee63df819dff20113ee69eeff1e2092521d47e7b3380",
		"listen_port", port1,
		"replace_peers", "true",
		"public_key", "38e02e238a1148882e86f687abfb9264ba3a65c538b6dc98eb595753e707a9eb19cfc177a696c4cd530383a0a90ef9c130e2b0e4e94558fa4124b7193ee5aca087b42772983b820b05759c1afc09c3952bd50092162b74b1a172448a0ec8d68432da628a118c6d7bb7f0fa69ce00c8abc4c2f7376475e858b6f98094a63f16025c45254115c69e21db98692744e6c25249122f2bda9cbe08cade26c19b3b4aeecb6d5b9b39048aa072d966a8e3b0e7db0c159b89c2635249576eb1537a25027880b823dc8cbd79a184349a27b6525f5bd541d62276a069511de49ee8705cb41c988312b74321923dbb455829baddfc3b80c97e45a49711580cc6a3476693b98d2a7a0d530342f9b133fbc8b6862309582613db090949a6bf726813eb98a6a53fae868d7910be44b8b6e4368bbe48be080851b8a92ee1f2476aa4143aa8bc3f8836455356591552f7d2bfd3d10172daad31683b07bba4d6750fdd98c76aecab04b31b623ca8c719ab94dc4055029c27029a20531fd33443b6f1a53400aa4b8b17efe3bc1dd2696a87cd7ed1102a58a584e45f9ac2aea7c20f6cd3651bf1b17be8873f54c7e3940f52c6008c9b1279027f215a0abf35598c1a322436c559231783203e4630cd1364978ee069d65a2b767c2f6e08aac7549efb225458a125758224d06a42ea0b24b6b70264a45fc71ac2033b5a420b56a019170c345618d26c14f26c1c92c1e9d42633491c79ab7c3487673ed43c6bd51c2b0252d8627385996ffe4c2d9c089024847186b419e5256300f63326abcc21b26db53acc67f85b699aba32c4329228aef9b8b407a35ffe0950ae653e885bca17d4ae293c73f90766491a631a1831b5ca24607241a663a83e60066255894d4c44eb611b6ea37715a7079dc151a1107eec000d3c8918fa9a7683d480cbd8392519c57327245ea5ca12c9b42de80540200508e5b5d3721c7af28ccec4b63bc46776d86941c70ab4e53d04925596222e39cca3ed0153c2429a1b5a4920ec7fd974aa87227fc407415888ce8de235158ca9c25306222475556a8791b933eb2267e70769bdcc4043c52279eabf54c15384d95642b99870350bced455da277404e413ad65811855b02b9a59d578759aaa68397bb0a60383b8f24d992ca888f46a51f5aea223a245986f687ac4d51192695cab3d6086b384255db4acea2285cdd3be7719b6e691a7e8a2b1ef307083201eb6a7a2dbb16a58e271570a7edee561ba428ef2d46aaabc0d03975868acaf5ed94ab4447beba9c3d4dbc243097cf5972e7ccb7bae037c7357c64b02857ca71296119f9c69cd6aa937261833450797970b4fae3420ec92bd885a9b1da49115c6a5f0944a66b78344107be396619740ace6f76de927cbea5ca2a11a6c47b4c2c64717a613a9d0f0442c83bec03221cca37f42f47a53a21cab943263153d8e4a536ddca533e48b5648a2f1987a37f30e0d1c597b110141b46574f07a6b541a383944437933b66a64997a37b1c709af631a052ac72ddc380ed400461261fc533953ea349ee53c4291917d8b83b1c2c5601a1dd6a0cd2aa7395f4c0d53f4109ac1067281c521da8d828aa02c058a49524dde004bc089b3d8d28ab3f06f7c990c73c7d8b8ee7b160242b607a118609a626491fb20a27f62772bce8bdc9c11f82a",
		"peer_key", "6939b6d231915e4c5185a4beccc95d3c6b2f4f335164dcb4b575cff406a28cc3c66fb86a47c8bcb4ba01df5b86f52185660914bb3bb399e85249131980b2616be755e9b78283d45954d8b0f43290979bca422318a90a774021af967251150351ecf9c94254656f69467ab4253e1a0087dc45665b8ea8e61da227074ab14e2f9c9bc7e584a5b614052ac10dc80436f18cee1195fb2088d7d2ce2648c4c564707cd43d44986665b13c63476c82b58309152403ecbc0067a96d0384d91c96be1955d88297780894e8f3accdc2811e60431c834b9b0705d3d689cdc974e8b729255b8726ec96c55b82fc059beeac067a7276e5e89184b58c1261c862fb2b78f5106b409080278acf0952273a21bcf92e2e897174a154fdb550de93b4531143fa0b74f3d03869c9099a503f710098ba01d086ea2e8b507862f9ce279a64885b4655bc4a2d86230550428fb82ae5a44c18999116a9168e95b02db93bb2c410eb6b0d74b97df2540f896b5f4b465201a3c153969645b762f73380b417ceda61bc554b27a8f98a80c1919f0a6b0068464384b9beeabec99767e5c5625b6b07515b1ea8c30a7aa7988caa2c5d49cd663c8869f26e823c566ab0345ae036d7d737814419253752ea9a815d957ef47906d579a516119948d27a854bb9608ac4fb499fc04c3765857ed3a765ce51391e764ceb8840da644a88822362d61a691b6d3a81a6893267bbc03362b14b6205a869215be103384da600786b14c15665a0eb065f6cac538490c6b60832d2931d407f41ba6ca7f6099ecc08da571839c187e5414743a0a6e39ca0ca922e0a543e1d034356270f59f45ee741810fd414a4fb38e29c16abb789b379a16a7b95e3c868ffd62f9e25bb6a885b449a9fb900c4ad0493d3304c08f46c882806e0529a5cd5bed89a260bc740e0696df30224b912567e42158c789245144812354c62f131c2110f51307e1b8b6942148189d2bf6a5b8e6d5414ac0c760cc048403966342539b3c17710aa912ab0afe3eb9b78c636e3eb7fb42c88099b54bda68df8f9351bcb6efc042959405f5f85225e8b5fd33c0a7bb141cb033c383468b2ac0dae5b91cb3c00ce55b7444335b7485fdc290a24d6be6f16892951151c946b6ad8265972b5ed9097607620f506a783299a608b2a8f812a4772c29b63b3b121435fc14d8f15222cd6424187c1e5f9199cb311ea0630d47ba6677bb069b6280c81aaeed61356e51cb42a518f6158f26bb0ec666ac8b39c2891727bc82183975d6e124fe2207d627a8d6fa445b2614eb96c3822fb50fa75835cb4a8c40cbb8bb81e3ae16dc206ab2452ce5f39399e9b46f0db068d1b2a898031c717bd94bcc17e5133fbb73b8ff699a625a8e92256d07937f32a6b81c4897b1932329a6520870ff5b530332b52de0b97d15ccb41f0bd4a816f48f8bd6df98ecf90933fec177a52c3381031fc940757a4309586c6214b852e4c13abc5969ca5cbd54126e0452fcfc36140a950d4c2cd751c4838601953573a9b8984b585c80aac7013c1b4e44a5832ec57d9b061a9f266940bb4d838a43773128c290386b700efe90a7a581d054c66d0453ad49430ac42cad6772ed7cb10382c4b388b5c18346db2808c4c38aa4d63028774188b189d565d6d6f4f995f7580e5ece7125b8d9046661197",
		"protocol_version", "1",
		"replace_allowed_ips", "true",
		"allowed_ip", "1.0.0.2/32",
		"endpoint", "127.0.0.1:"+port2,
	)
	cfgs[1] = uapiCfg(
		"private_key", "841828b2d18d1c1b65bbdc30e257ab9a5066c9cbc60929882cc0a270d04852f26589d224a17353f81b505a0c4bdff91382098377dc6f7c8b23aff2b2fdd0339ca1982fa4ad4d5a50dbf91f1758c2ab293487bbcbfcbbb829d9594de9cb8006a406752e08f5be06385e891570f9838f9ae9b5214469a7a85e96a0020ff7b4c6a6a406c3572c724119db5710ea1fad3133996559f41ca2f0190addc779d1a76b8cd58d55d26f7a8a011e747b9f6a4968627aa5404cbf203d35305bad6a7c94c2b9c99b1113e506432972170c3f5094a1e4c711c60c8af7d16ae23354413aaa557c8c9d6604b03109a6787418cb5c2f5c6d600c669343b5ffc685e6545ccd64355359155e82073419600fc64d9d8a9b11491e49e321e514b9ffa434f8854885b95e563a4d193b8e978ca38d20857415b9fc8c02d17639b1446ead7931b9a1c9bf0469a5ab6a6e228bba06a1db737525c77bdbd1a4a0577a674473f42b7c678317ab36ae4295cb57654625d6077ff3a154f701dd954a835aaf50eb66b7f15f3fd3cda2c4be0693a53ffc6c66d53a3a5cc7ff865b646c842713c0135a58b4c35909887f0a2a31258622f3e14bb1328354ab237836196d03c5f1794bb998785b4c501f665893a544eb109e17643b6c8c917ca796a1e107245069d0ec4d3a1a479454ab11b48b943296778c58a14cb532a54501d84e4c6350eaa38bb917220a14560eccceaee036d9231abaa8932c474a78d92841788da90a86b6eb8579baae48204b9ee552767c2573b5807f560f505557bd13aa72258f10b569bff02d8f3bc8d12bb000f7b417fcba278b5ad37079acf5903cf81a66babe056a3383a2841bfacd99c41714387f43b60b670326d42290afd28e6f1c2ceb405d707c0459e14545e654fde06360e84b7fe47c26608adc130cab3b5462fc6e69dc9ef1196fda7b0d8e7526a7cc4330387c3167a5fc94b2cc00cb3f889cc7bcc7a043a01da17417a3a98dfb91783013a76a6dd7eb669b557e409b8424a3b3237c9826e8bf174b212af964e61b88240884fc1c92b257983c78a321767ab968cc6f33b76c617e8643800d7485151cc1d3074ea838bc9a497310871b391688e65c098ff016f396487b863ec2017f8ce73dfe1ca264559e5426b49f4027a22216c895ce11e8952e35b801413c06591d8413365b65b0b621a15b69c518a4a090f851d3a18020b3803f2b5b36dc48c2104cb488c36f3308561a4bcc2b3895654030a6b2e5501e9707798215368883be470ba1eb796fd2f4174a789def08713e8679c765cacf0868475cc1ddb86732e40e69d3b24495a4a334b14910517c4b43ab9cb30fcb066842afba08acce59bc2e9702037c351df3976d84584f15055c7492100a716c0397187a0c5c54a942173d6e36071b0399a170a2d47638630770894cc5624b76f6cab72b8a7bc7a677ecd6afe2062e8b6a679693b2612970b814a2e0e09f4f72ca71802b75c5bd8e7bb94ce36dc9d9228f96744f493e0bf11ed9f043fe9b7cbeac91bb71b8a2563107804f3133b3c74a5cdce8c74c421cfdb74d30851325909eaf96cb2445171ac6148d49bd70aacf6c80283dd3676fe0881dbaafcf4c8a9f48c33ae6a1f76cc282fac26939b6d231915e4c5185a4beccc95d3c6b2f4f335164dcb4b575cff406a28cc3c66fb86a47c8bcb4ba01df5b86f52185660914bb3bb399e85249131980b2616be755e9b78283d45954d8b0f43290979bca422318a90a774021af967251150351ecf9c94254656f69467ab4253e1a0087dc45665b8ea8e61da227074ab14e2f9c9bc7e584a5b614052ac10dc80436f18cee1195fb2088d7d2ce2648c4c564707cd43d44986665b13c63476c82b58309152403ecbc0067a96d0384d91c96be1955d88297780894e8f3accdc2811e60431c834b9b0705d3d689cdc974e8b729255b8726ec96c55b82fc059beeac067a7276e5e89184b58c1261c862fb2b78f5106b409080278acf0952273a21bcf92e2e897174a154fdb550de93b4531143fa0b74f3d03869c9099a503f710098ba01d086ea2e8b507862f9ce279a64885b4655bc4a2d86230550428fb82ae5a44c18999116a9168e95b02db93bb2c410eb6b0d74b97df2540f896b5f4b465201a3c153969645b762f73380b417ceda61bc554b27a8f98a80c1919f0a6b0068464384b9beeabec99767e5c5625b6b07515b1ea8c30a7aa7988caa2c5d49cd663c8869f26e823c566ab0345ae036d7d737814419253752ea9a815d957ef47906d579a516119948d27a854bb9608ac4fb499fc04c3765857ed3a765ce51391e764ceb8840da644a88822362d61a691b6d3a81a6893267bbc03362b14b6205a869215be103384da600786b14c15665a0eb065f6cac538490c6b60832d2931d407f41ba6ca7f6099ecc08da571839c187e5414743a0a6e39ca0ca922e0a543e1d034356270f59f45ee741810fd414a4fb38e29c16abb789b379a16a7b95e3c868ffd62f9e25bb6a885b449a9fb900c4ad0493d3304c08f46c882806e0529a5cd5bed89a260bc740e0696df30224b912567e42158c789245144812354c62f131c2110f51307e1b8b6942148189d2bf6a5b8e6d5414ac0c760cc048403966342539b3c17710aa912ab0afe3eb9b78c636e3eb7fb42c88099b54bda68df8f9351bcb6efc042959405f5f85225e8b5fd33c0a7bb141cb033c383468b2ac0dae5b91cb3c00ce55b7444335b7485fdc290a24d6be6f16892951151c946b6ad8265972b5ed9097607620f506a783299a608b2a8f812a4772c29b63b3b121435fc14d8f15222cd6424187c1e5f9199cb311ea0630d47ba6677bb069b6280c81aaeed61356e51cb42a518f6158f26bb0ec666ac8b39c2891727bc82183975d6e124fe2207d627a8d6fa445b2614eb96c3822fb50fa75835cb4a8c40cbb8bb81e3ae16dc206ab2452ce5f39399e9b46f0db068d1b2a898031c717bd94bcc17e5133fbb73b8ff699a625a8e92256d07937f32a6b81c4897b1932329a6520870ff5b530332b52de0b97d15ccb41f0bd4a816f48f8bd6df98ecf90933fec177a52c3381031fc940757a4309586c6214b852e4c13abc5969ca5cbd54126e0452fcfc36140a950d4c2cd751c4838601953573a9b8984b585c80aac7013c1b4e44a5832ec57d9b061a9f266940bb4d838a43773128c290386b700efe90a7a581d054c66d0453ad49430ac42cad6772ed7cb10382c4b388b5c18346db2808c4c38aa4d63028774188b189d565d6d6f4f995f7580e5ece7125b8d9046661197eddf4b236ba79eef17fcb47b470f5e51f2ad13d9d44bf5739ae4af47529fa7530f4dca007b9149fdb61250d978e6f3a10a31c15ae3a7c74e41a090fd98b124be",
		"listen_port", port2,
		"replace_peers", "true",
		"public_key", "6939b6d231915e4c5185a4beccc95d3c6b2f4f335164dcb4b575cff406a28cc3c66fb86a47c8bcb4ba01df5b86f52185660914bb3bb399e85249131980b2616be755e9b78283d45954d8b0f43290979bca422318a90a774021af967251150351ecf9c94254656f69467ab4253e1a0087dc45665b8ea8e61da227074ab14e2f9c9bc7e584a5b614052ac10dc80436f18cee1195fb2088d7d2ce2648c4c564707cd43d44986665b13c63476c82b58309152403ecbc0067a96d0384d91c96be1955d88297780894e8f3accdc2811e60431c834b9b0705d3d689cdc974e8b729255b8726ec96c55b82fc059beeac067a7276e5e89184b58c1261c862fb2b78f5106b409080278acf0952273a21bcf92e2e897174a154fdb550de93b4531143fa0b74f3d03869c9099a503f710098ba01d086ea2e8b507862f9ce279a64885b4655bc4a2d86230550428fb82ae5a44c18999116a9168e95b02db93bb2c410eb6b0d74b97df2540f896b5f4b465201a3c153969645b762f73380b417ceda61bc554b27a8f98a80c1919f0a6b0068464384b9beeabec99767e5c5625b6b07515b1ea8c30a7aa7988caa2c5d49cd663c8869f26e823c566ab0345ae036d7d737814419253752ea9a815d957ef47906d579a516119948d27a854bb9608ac4fb499fc04c3765857ed3a765ce51391e764ceb8840da644a88822362d61a691b6d3a81a6893267bbc03362b14b6205a869215be103384da600786b14c15665a0eb065f6cac538490c6b60832d2931d407f41ba6ca7f6099ecc08da571839c187e5414743a0a6e39ca0ca922e0a543e1d034356270f59f45ee741810fd414a4fb38e29c16abb789b379a16a7b95e3c868ffd62f9e25bb6a885b449a9fb900c4ad0493d3304c08f46c882806e0529a5cd5bed89a260bc740e0696df30224b912567e42158c789245144812354c62f131c2110f51307e1b8b6942148189d2bf6a5b8e6d5414ac0c760cc048403966342539b3c17710aa912ab0afe3eb9b78c636e3eb7fb42c88099b54bda68df8f9351bcb6efc042959405f5f85225e8b5fd33c0a7bb141cb033c383468b2ac0dae5b91cb3c00ce55b7444335b7485fdc290a24d6be6f16892951151c946b6ad8265972b5ed9097607620f506a783299a608b2a8f812a4772c29b63b3b121435fc14d8f15222cd6424187c1e5f9199cb311ea0630d47ba6677bb069b6280c81aaeed61356e51cb42a518f6158f26bb0ec666ac8b39c2891727bc82183975d6e124fe2207d627a8d6fa445b2614eb96c3822fb50fa75835cb4a8c40cbb8bb81e3ae16dc206ab2452ce5f39399e9b46f0db068d1b2a898031c717bd94bcc17e5133fbb73b8ff699a625a8e92256d07937f32a6b81c4897b1932329a6520870ff5b530332b52de0b97d15ccb41f0bd4a816f48f8bd6df98ecf90933fec177a52c3381031fc940757a4309586c6214b852e4c13abc5969ca5cbd54126e0452fcfc36140a950d4c2cd751c4838601953573a9b8984b585c80aac7013c1b4e44a5832ec57d9b061a9f266940bb4d838a43773128c290386b700efe90a7a581d054c66d0453ad49430ac42cad6772ed7cb10382c4b388b5c18346db2808c4c38aa4d63028774188b189d565d6d6f4f995f7580e5ece7125b8d9046661197",
		"peer_key", "38e02e238a1148882e86f687abfb9264ba3a65c538b6dc98eb595753e707a9eb19cfc177a696c4cd530383a0a90ef9c130e2b0e4e94558fa4124b7193ee5aca087b42772983b820b05759c1afc09c3952bd50092162b74b1a172448a0ec8d68432da628a118c6d7bb7f0fa69ce00c8abc4c2f7376475e858b6f98094a63f16025c45254115c69e21db98692744e6c25249122f2bda9cbe08cade26c19b3b4aeecb6d5b9b39048aa072d966a8e3b0e7db0c159b89c2635249576eb1537a25027880b823dc8cbd79a184349a27b6525f5bd541d62276a069511de49ee8705cb41c988312b74321923dbb455829baddfc3b80c97e45a49711580cc6a3476693b98d2a7a0d530342f9b133fbc8b6862309582613db090949a6bf726813eb98a6a53fae868d7910be44b8b6e4368bbe48be080851b8a92ee1f2476aa4143aa8bc3f8836455356591552f7d2bfd3d10172daad31683b07bba4d6750fdd98c76aecab04b31b623ca8c719ab94dc4055029c27029a20531fd33443b6f1a53400aa4b8b17efe3bc1dd2696a87cd7ed1102a58a584e45f9ac2aea7c20f6cd3651bf1b17be8873f54c7e3940f52c6008c9b1279027f215a0abf35598c1a322436c559231783203e4630cd1364978ee069d65a2b767c2f6e08aac7549efb225458a125758224d06a42ea0b24b6b70264a45fc71ac2033b5a420b56a019170c345618d26c14f26c1c92c1e9d42633491c79ab7c3487673ed43c6bd51c2b0252d8627385996ffe4c2d9c089024847186b419e5256300f63326abcc21b26db53acc67f85b699aba32c4329228aef9b8b407a35ffe0950ae653e885bca17d4ae293c73f90766491a631a1831b5ca24607241a663a83e60066255894d4c44eb611b6ea37715a7079dc151a1107eec000d3c8918fa9a7683d480cbd8392519c57327245ea5ca12c9b42de80540200508e5b5d3721c7af28ccec4b63bc46776d86941c70ab4e53d04925596222e39cca3ed0153c2429a1b5a4920ec7fd974aa87227fc407415888ce8de235158ca9c25306222475556a8791b933eb2267e70769bdcc4043c52279eabf54c15384d95642b99870350bced455da277404e413ad65811855b02b9a59d578759aaa68397bb0a60383b8f24d992ca888f46a51f5aea223a245986f687ac4d51192695cab3d6086b384255db4acea2285cdd3be7719b6e691a7e8a2b1ef307083201eb6a7a2dbb16a58e271570a7edee561ba428ef2d46aaabc0d03975868acaf5ed94ab4447beba9c3d4dbc243097cf5972e7ccb7bae037c7357c64b02857ca71296119f9c69cd6aa937261833450797970b4fae3420ec92bd885a9b1da49115c6a5f0944a66b78344107be396619740ace6f76de927cbea5ca2a11a6c47b4c2c64717a613a9d0f0442c83bec03221cca37f42f47a53a21cab943263153d8e4a536ddca533e48b5648a2f1987a37f30e0d1c597b110141b46574f07a6b541a383944437933b66a64997a37b1c709af631a052ac72ddc380ed400461261fc533953ea349ee53c4291917d8b83b1c2c5601a1dd6a0cd2aa7395f4c0d53f4109ac1067281c521da8d828aa02c058a49524dde004bc089b3d8d28ab3f06f7c990c73c7d8b8ee7b160242b607a118609a626491fb20a27f62772bce8bdc9c11f82a",
		"protocol_version", "1",
		"replace_allowed_ips", "true",
		"allowed_ip", "1.0.0.1/32",
		"endpoint", "127.0.0.1:"+port1,
	)
	return
}

// A testPair is a pair of testPeers.
type testPair [2]testPeer

// A testPeer is a peer used for testing.
type testPeer struct {
	tun *tuntest.ChannelTUN
	dev *Device
	ip  net.IP
}

type SendDirection bool

const (
	Ping SendDirection = true
	Pong SendDirection = false
)

func (pair *testPair) Send(tb testing.TB, ping SendDirection, done chan struct{}) {
	tb.Helper()
	p0, p1 := pair[0], pair[1]
	if !ping {
		// pong is the new ping
		p0, p1 = p1, p0
	}
	msg := tuntest.Ping(p0.ip, p1.ip)
	p1.tun.Outbound <- msg
	timer := time.NewTimer(100 * time.Second)
	defer timer.Stop()
	var err error
	select {
	case msgRecv := <-p0.tun.Inbound:
		if !bytes.Equal(msg, msgRecv) {
			err = errors.New("ping did not transit correctly")
		}
	case <-timer.C:
		err = errors.New("ping did not transit")
	case <-done:
	}
	if err != nil {
		// The error may have occurred because the test is done.
		select {
		case <-done:
			return
		default:
		}
		// Real error.
		tb.Error(err)
	}
}

// genTestPair creates a testPair.
func genTestPair(tb testing.TB) (pair testPair) {
	const maxAttempts = 10
NextAttempt:
	for i := 0; i < maxAttempts; i++ {
		cfg := genConfigs(tb)
		// Bring up a ChannelTun for each config.
		for i := range pair {
			p := &pair[i]
			p.tun = tuntest.NewChannelTUN()
			if i == 0 {
				p.ip = net.ParseIP("1.0.0.1")
			} else {
				p.ip = net.ParseIP("1.0.0.2")
			}
			level := LogLevelVerbose
			if _, ok := tb.(*testing.B); ok && !testing.Verbose() {
				level = LogLevelError
			}
			p.dev = NewDevice(p.tun.TUN(), NewLogger(level, fmt.Sprintf("dev%d: ", i)))
			p.dev.Up()
			if err := p.dev.IpcSetOperation(cfg[i]); err != nil {
				// genConfigs attempted to pick ports that were free.
				// There's a tiny window between genConfigs closing the port
				// and us opening it, during which another process could
				// start using it. We probably just lost that race.
				// Try again from the beginning.
				// If there's something permanent wrong,
				// we'll see that when we run out of attempts.
				tb.Logf("failed to configure device %d: %v", i, err)
				continue NextAttempt
			}
			//fmt.Printf("pair1 %+v\n", p.dev.staticIdentity.publicKey[:])
			// The device might still not be up, e.g. due to an error
			// in RoutineTUNEventReader's call to dev.Up that got swallowed.
			// Assume it's due to a transient error (port in use), and retry.
			if !p.dev.isUp.Get() {
				tb.Logf("device %d did not come up, trying again", i)
				continue NextAttempt
			}
			// The device is up. Close it when the test completes.
			tb.Cleanup(p.dev.Close)
		}
		return // success
	}

	tb.Fatalf("genChannelTUNs: failed %d times", maxAttempts)
	return
}

func TestTwoDevicePing(t *testing.T) {
	pair := genTestPair(t)
	t.Run("ping 1.0.0.1", func(t *testing.T) {
		pair.Send(t, Ping, nil)
	})
	t.Run("ping 1.0.0.2", func(t *testing.T) {
		pair.Send(t, Pong, nil)
	})
}

// TestConcurrencySafety does other things concurrently with tunnel use.
// It is intended to be used with the race detector to catch data races.
func TestConcurrencySafety(t *testing.T) {
	pair := genTestPair(t)
	done := make(chan struct{})

	const warmupIters = 10
	var warmup sync.WaitGroup
	warmup.Add(warmupIters)
	go func() {
		// Send data continuously back and forth until we're done.
		// Note that we may continue to attempt to send data
		// even after done is closed.
		i := warmupIters
		for ping := Ping; ; ping = !ping {
			pair.Send(t, ping, done)
			select {
			case <-done:
				return
			default:
			}
			if i > 0 {
				warmup.Done()
				i--
			}
		}
	}()
	warmup.Wait()

	applyCfg := func(cfg io.ReadSeeker) {
		cfg.Seek(0, io.SeekStart)
		err := pair[0].dev.IpcSetOperation(cfg)
		if err != nil {
			t.Fatal(err.Error())
		}
	}

	// Change persistent_keepalive_interval concurrently with tunnel use.
	t.Run("persistentKeepaliveInterval", func(t *testing.T) {
		println("Starting failing test...")
		cfg := uapiCfg(
			"peer_key", "6939b6d231915e4c5185a4beccc95d3c6b2f4f335164dcb4b575cff406a28cc3c66fb86a47c8bcb4ba01df5b86f52185660914bb3bb399e85249131980b2616be755e9b78283d45954d8b0f43290979bca422318a90a774021af967251150351ecf9c94254656f69467ab4253e1a0087dc45665b8ea8e61da227074ab14e2f9c9bc7e584a5b614052ac10dc80436f18cee1195fb2088d7d2ce2648c4c564707cd43d44986665b13c63476c82b58309152403ecbc0067a96d0384d91c96be1955d88297780894e8f3accdc2811e60431c834b9b0705d3d689cdc974e8b729255b8726ec96c55b82fc059beeac067a7276e5e89184b58c1261c862fb2b78f5106b409080278acf0952273a21bcf92e2e897174a154fdb550de93b4531143fa0b74f3d03869c9099a503f710098ba01d086ea2e8b507862f9ce279a64885b4655bc4a2d86230550428fb82ae5a44c18999116a9168e95b02db93bb2c410eb6b0d74b97df2540f896b5f4b465201a3c153969645b762f73380b417ceda61bc554b27a8f98a80c1919f0a6b0068464384b9beeabec99767e5c5625b6b07515b1ea8c30a7aa7988caa2c5d49cd663c8869f26e823c566ab0345ae036d7d737814419253752ea9a815d957ef47906d579a516119948d27a854bb9608ac4fb499fc04c3765857ed3a765ce51391e764ceb8840da644a88822362d61a691b6d3a81a6893267bbc03362b14b6205a869215be103384da600786b14c15665a0eb065f6cac538490c6b60832d2931d407f41ba6ca7f6099ecc08da571839c187e5414743a0a6e39ca0ca922e0a543e1d034356270f59f45ee741810fd414a4fb38e29c16abb789b379a16a7b95e3c868ffd62f9e25bb6a885b449a9fb900c4ad0493d3304c08f46c882806e0529a5cd5bed89a260bc740e0696df30224b912567e42158c789245144812354c62f131c2110f51307e1b8b6942148189d2bf6a5b8e6d5414ac0c760cc048403966342539b3c17710aa912ab0afe3eb9b78c636e3eb7fb42c88099b54bda68df8f9351bcb6efc042959405f5f85225e8b5fd33c0a7bb141cb033c383468b2ac0dae5b91cb3c00ce55b7444335b7485fdc290a24d6be6f16892951151c946b6ad8265972b5ed9097607620f506a783299a608b2a8f812a4772c29b63b3b121435fc14d8f15222cd6424187c1e5f9199cb311ea0630d47ba6677bb069b6280c81aaeed61356e51cb42a518f6158f26bb0ec666ac8b39c2891727bc82183975d6e124fe2207d627a8d6fa445b2614eb96c3822fb50fa75835cb4a8c40cbb8bb81e3ae16dc206ab2452ce5f39399e9b46f0db068d1b2a898031c717bd94bcc17e5133fbb73b8ff699a625a8e92256d07937f32a6b81c4897b1932329a6520870ff5b530332b52de0b97d15ccb41f0bd4a816f48f8bd6df98ecf90933fec177a52c3381031fc940757a4309586c6214b852e4c13abc5969ca5cbd54126e0452fcfc36140a950d4c2cd751c4838601953573a9b8984b585c80aac7013c1b4e44a5832ec57d9b061a9f266940bb4d838a43773128c290386b700efe90a7a581d054c66d0453ad49430ac42cad6772ed7cb10382c4b388b5c18346db2808c4c38aa4d63028774188b189d565d6d6f4f995f7580e5ece7125b8d9046661197",
			"persistent_keepalive_interval", "1",
		)
		const iters = 1
		for i := 0; i < iters; i++ {
			applyCfg(cfg)
		}
	})

	// Change private keys concurrently with tunnel use.
	t.Run("privateKey", func(t *testing.T) {
		bad := uapiCfg("private_key", "7777777777777777777777777777777777777777777777777777777777777777")
		good := uapiCfg("private_key", "c6c212b9793fb256ac5499a3270b738dca6ddb172359f96ad815549441c4508248b137cfd3c1c60b59572fab0293198cbfb307b3d26739ca6bda0ab1202c74864a62dcbb546f419d62e53006f44a47f144cc3a24a040500a249e51900bcae1108ea5035f0b5edff80b4cdcaa02ba6862c268ea552e8b22b14ca093013a077033a3db518fed5329b42a7ff960945a93327e90bde0d5a81582cbd806b8241b69f023aa296a8cee741a25005c74930b95f29cc7d421a605570cb965d80c0ebc3497a5101792d52877375a94261d7e910c2b27176073be8ae7700b3790f7cac404a548c8609760ea189c1c3a1ae0a60583c7b28a3be3942f1fc08fcc645388a29278433f79108dba6aae029bae5c944e4b9c65ece622a1f23008a1805a23732460a3905c491cf98abb305bc2a222c8e41cead31cccb9293e9b395bc67d35d549cfb88f7b31130afb6674fa3dfa26aa55f42e6c7963b3471649e506acc2ab73c9373cfaaadb569536b6002202b73f64c4138486d7438d5753564a4953f6cb1cee91b43de362d5124f8c4060d7f5441087b4f1dc4081ba4335b185417b95263aa487d3c173d128e2926a28a1ad19094b46f2cfe7cc433eec04bd5cbdcb92452ef273f7c3297fb35d4c4927e3159e2c8c4af914aee20b7efaf39a53eb0ac3338754c857060c94ab3bac1df60b1eb10a38a5cc3a996018a902a6d72a365aae5e189ae9361584317f320baef8351308697f271c7820589f15876a19e82d631a873b8504fee599e358be74f01c536474f6fbb00bcc1af3b6ae1d39a411bb90604b2358782b8c599cdca4adae521392aac03668137bf3b57c3cb61b65183f01476a2191f73904d961b687b5ca4fc5c790ca6851fbab2fd3300e20be5a42c95066b3f9c51be32967b3fc016ab9b8f3c01ea4d653d1cacb6f3094b0d31484538bfd45a85d01423bf46a8ea92d62c95192f58630d64db0535101c896c4f5b816a3bbd9283d96e0926964769e349208a8101ef97315fc351399ad29db73f0d40505d65d2c0b244a44670524478f654646c13ba0794421e768acbb6063b385de0660a98776980b4632607a391c75470275329c3324445765fc123d6576d532b733f83517f87894178b905a354180cc8a908f8a25363345cdc4906590f6a193f42279228272ea30e4f7181b50042726b0815a72d48b434e97bbe9c87c1887ae5886b41af52d9cc9294c00028bb16f1237a68ba98d7d214390360804975c03f794ecc1b711cb69132cc2cd113b8f5a4bb2c66b52839db6073a77f387da3b034b6949ee14b2a778c7a83a3b06f7254ef1614a26045a983b9046b06f469ef4861d11eb314e54204e701325a32fb0ab5decbc5619983d151acc18b57adadbb21d6b51169679638136dda92a8a90c6b432b0102806d2bc231ac58b589a500965c54384ca968460bea4c95459979ae7a52f7bb8a27033fe29bd284018e2fa427a994dce441dc2011fabda3a70917d4da25d15ec1f8022b9c86555b035bd91a3135f87b91d646944d57922f7102be5cdb4c5bfa1ec47bf24592a001e2b295b133b69d9ca8dd36702c5f4051e75acd46c4401782d2ad61c7d9a15c25039dc5c79ad15a0d1ea6059d5179de59838e02e238a1148882e86f687abfb9264ba3a65c538b6dc98eb595753e707a9eb19cfc177a696c4cd530383a0a90ef9c130e2b0e4e94558fa4124b7193ee5aca087b42772983b820b05759c1afc09c3952bd50092162b74b1a172448a0ec8d68432da628a118c6d7bb7f0fa69ce00c8abc4c2f7376475e858b6f98094a63f16025c45254115c69e21db98692744e6c25249122f2bda9cbe08cade26c19b3b4aeecb6d5b9b39048aa072d966a8e3b0e7db0c159b89c2635249576eb1537a25027880b823dc8cbd79a184349a27b6525f5bd541d62276a069511de49ee8705cb41c988312b74321923dbb455829baddfc3b80c97e45a49711580cc6a3476693b98d2a7a0d530342f9b133fbc8b6862309582613db090949a6bf726813eb98a6a53fae868d7910be44b8b6e4368bbe48be080851b8a92ee1f2476aa4143aa8bc3f8836455356591552f7d2bfd3d10172daad31683b07bba4d6750fdd98c76aecab04b31b623ca8c719ab94dc4055029c27029a20531fd33443b6f1a53400aa4b8b17efe3bc1dd2696a87cd7ed1102a58a584e45f9ac2aea7c20f6cd3651bf1b17be8873f54c7e3940f52c6008c9b1279027f215a0abf35598c1a322436c559231783203e4630cd1364978ee069d65a2b767c2f6e08aac7549efb225458a125758224d06a42ea0b24b6b70264a45fc71ac2033b5a420b56a019170c345618d26c14f26c1c92c1e9d42633491c79ab7c3487673ed43c6bd51c2b0252d8627385996ffe4c2d9c089024847186b419e5256300f63326abcc21b26db53acc67f85b699aba32c4329228aef9b8b407a35ffe0950ae653e885bca17d4ae293c73f90766491a631a1831b5ca24607241a663a83e60066255894d4c44eb611b6ea37715a7079dc151a1107eec000d3c8918fa9a7683d480cbd8392519c57327245ea5ca12c9b42de80540200508e5b5d3721c7af28ccec4b63bc46776d86941c70ab4e53d04925596222e39cca3ed0153c2429a1b5a4920ec7fd974aa87227fc407415888ce8de235158ca9c25306222475556a8791b933eb2267e70769bdcc4043c52279eabf54c15384d95642b99870350bced455da277404e413ad65811855b02b9a59d578759aaa68397bb0a60383b8f24d992ca888f46a51f5aea223a245986f687ac4d51192695cab3d6086b384255db4acea2285cdd3be7719b6e691a7e8a2b1ef307083201eb6a7a2dbb16a58e271570a7edee561ba428ef2d46aaabc0d03975868acaf5ed94ab4447beba9c3d4dbc243097cf5972e7ccb7bae037c7357c64b02857ca71296119f9c69cd6aa937261833450797970b4fae3420ec92bd885a9b1da49115c6a5f0944a66b78344107be396619740ace6f76de927cbea5ca2a11a6c47b4c2c64717a613a9d0f0442c83bec03221cca37f42f47a53a21cab943263153d8e4a536ddca533e48b5648a2f1987a37f30e0d1c597b110141b46574f07a6b541a383944437933b66a64997a37b1c709af631a052ac72ddc380ed400461261fc533953ea349ee53c4291917d8b83b1c2c5601a1dd6a0cd2aa7395f4c0d53f4109ac1067281c521da8d828aa02c058a49524dde004bc089b3d8d28ab3f06f7c990c73c7d8b8ee7b160242b607a118609a626491fb20a27f62772bce8bdc9c11f82acba56c0cdeda1c968c5a5cfa5e5c2ffaabea80c1106ba1c619af8eaa2a8527b513e96b7b96ee31ac78f5ee63df819dff20113ee69eeff1e2092521d47e7b3380")
		// Set iters to a large number like 1000 to flush out data races quickly.
		// Don't leave it large. That can cause logical races
		// in which the handshake is interleaved with key changes
		// such that the private key appears to be unchanging but
		// other state gets reset, which can cause handshake failures like
		// "Received packet with invalid mac1".
		const iters = 10
		for i := 0; i < iters; i++ {
			applyCfg(bad)
			applyCfg(good)
		}
	})

	close(done)
}

func assertNil(t *testing.T, err error) {
	if err != nil {
		t.Fatal(err)
	}
}

func assertEqual(t *testing.T, a, b []byte) {
	if !bytes.Equal(a, b) {
		t.Fatal(a, "!=", b)
	}
}

func randDevice() *Device {
	pk, sk := k.KeyGen(nil)
	var bpk KyberKEMPK
	var bsk KyberKEMSK
	copy(bpk[:], pk[:])
	copy(bsk[:], sk[:])
	tun := newDummyTUN("dummy")
	logger := NewLogger(LogLevelError, "")
	device := NewDevice(tun, logger)
	device.SetPrivateKey(bsk)
	device.SetPublicKey(bpk)
	return device
}

func BenchmarkLatency(b *testing.B) {
	pair := genTestPair(b)

	// Establish a connection.
	pair.Send(b, Ping, nil)
	pair.Send(b, Pong, nil)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		pair.Send(b, Ping, nil)
		pair.Send(b, Pong, nil)
	}
}

func BenchmarkThroughput(b *testing.B) {
	pair := genTestPair(b)

	// Establish a connection.
	pair.Send(b, Ping, nil)
	pair.Send(b, Pong, nil)

	// Measure how long it takes to receive b.N packets,
	// starting when we receive the first packet.
	var recv uint64
	var elapsed time.Duration
	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		defer wg.Done()
		var start time.Time
		for {
			<-pair[0].tun.Inbound
			new := atomic.AddUint64(&recv, 1)
			if new == 1 {
				start = time.Now()
			}
			// Careful! Don't change this to else if; b.N can be equal to 1.
			if new == uint64(b.N) {
				elapsed = time.Since(start)
				return
			}
		}
	}()

	// Send packets as fast as we can until we've received enough.
	ping := tuntest.Ping(pair[0].ip, pair[1].ip)
	pingc := pair[1].tun.Outbound
	var sent uint64
	for atomic.LoadUint64(&recv) != uint64(b.N) {
		sent++
		pingc <- ping
	}
	wg.Wait()

	b.ReportMetric(float64(elapsed)/float64(b.N), "ns/op")
	b.ReportMetric(1-float64(b.N)/float64(sent), "packet-loss")
}

func BenchmarkUAPIGet(b *testing.B) {
	pair := genTestPair(b)
	pair.Send(b, Ping, nil)
	pair.Send(b, Pong, nil)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		pair[0].dev.IpcGetOperation(ioutil.Discard)
	}
}
